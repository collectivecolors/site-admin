#!/bin/bash
#-------------------------------------------------------------------------------
#
# dbcommit
#
#-------------------------------------------------------------------------------
# Properties


HELP="
The dbcommit command efficiently backs up Drupal site data.

WARNING: This script has only been tested with 10.04 LTS.

--------------------------------------------------------------------------------

 Developed by Adrian Webb of http://collectivecolors.com
 Licensed under GPL v2

 See the project page at:  http://github.com/collectivecolors/site-admin
 Report issues here:       http://github.com/collectivecolors/site-admin/issues
 
--------------------------------------------------------------------------------
"

USAGE="
usage: dbcommit [ -h | --help ]                      # Show usage information
                ----------------------------------------------------------------
                [ -m | --message <message> ]         # Commit message for this database commit.
                ----------------------------------------------------------------
                [ -u | --user <os-username> ]        # OS username to select home directory for ~/Sites.
                ----------------------------------------------------------------
                [ -w | --web-dir <web-dir> ]         # Document root of the Drupal site.
                ----------------------------------------------------------------
                [ -d | --db-dir <db-dir> ]           # Database backup directory.
                ----------------------------------------------------------------
                [ -f | --db-filename <db-filename> ] # Database schema file within database directory.
                ----------------------------------------------------------------
                <drupal-site>                        # Drupal site within $HOME/Sites directory.
                ----------------------------------------------------------------
                [ <message> ]                        # Commit message (DEPRECIATED - USE -m|--message).
                ----------------------------------------------------------------
                [ <os-username> ]                    # Home directory user (DEPRECIATED - USE -u|--user).
"


#-------------------------------------------------------------------------------
# Variables

IFS_ORIG="$IFS"

# Import shared utilities.
source common_utils || exit 1

INIT_DIR=`get_command_location $0`

# echo "COMMON_DIR = $COMMON_DIR"
# echo "SHARED_LIB_DIR = $SHARED_LIB_DIR"
# echo "SHARED_LIB_BIN = $SHARED_LIB_BIN"
# echo "SCRIPT_EXT = $SCRIPT_EXT"
# echo "PUBLIC_EXT = $PUBLIC_EXT"


#-------------------------------------------------------------------------------
# Parameters

# echo "INPUT = $@"

# Default parameters.
PARAMS=`normalize_params "$@"`
# echo "PARAMS = $PARAMS"


HELP_WANTED=''
COMMIT_MESSAGE=''
OS_USER=''

WWW_DIR=''
DB_DIR=''
DB_FILENAME=''
DB_FILE=''

TIMESTAMP=`timestamp`

# Parse any options and flags.
parse_flag '-h|--help' HELP_WANTED || exit 2
parse_option '-m|--message' COMMIT_MESSAGE '' 'Commit message must be specified.' || exit 3
parse_option '-u|--user' OS_USER '' 'Valid operating system user must be specified.' || exit 4
parse_option '-w|--web-dir' WWW_DIR 'validate_directory' 'Existing Drupal document root must be specified.' || exit 5
parse_option '-d|--db-dir' DB_DIR '' 'Database directory must be specified.' || exit 6
parse_option '-f|--db-filename' DB_FILENAME '' 'Database schema filename must be specified.' || exit 7

# Reassign parameters.
IFS=$'\n'
set -- $PARAMS
IFS="$IFS_ORIG"

# echo "PARAMS = $PARAMS"
# echo "FIRST = $1"
# echo "SECOND = $2"
# echo "THIRD = $3"

# Standard help message.
if [ "$HELP_WANTED" ]
then
    echo "$HELP"
    echo "$USAGE"
    exit 0  
fi

# Parse arguments.

SITE="$1"

if [ ! "$SITE" ]
then
	echo "Existing Drupal site required to perform database commits."
	exit 8
fi

if [ "$2" ]
then
	COMMIT_MESSAGE="$2"
fi
if [ ! "$COMMIT_MESSAGE" ]
then
	COMMIT_MESSAGE="Database commit."
fi
# echo "COMMIT_MESSAGE = $COMMIT_MESSAGE"

if [ "$3" ]
then
	OS_USER="$3"
fi
# echo "OS_USER = $OS_USER"

if [ "$OS_USER" ]
then
	HOMEDIR="/home/$OS_USER"
else
  HOMEDIR="$HOME"
fi
# echo "HOMEDIR = $HOMEDIR"

if [ ! "$WWW_DIR" ]
then
	WWW_DIR="$HOMEDIR/Sites/$SITE/www"
fi
# echo "WWW_DIR = $WWW_DIR"

if [ ! "$DB_DIR" ]
then
	DB_DIR="$HOMEDIR/Database/sites/$SITE"
fi
# echo "DB_DIR = $DB_DIR"

if [ ! "$DB_FILENAME" ]
then
	DB_FILENAME="db.sql"
fi
# echo "DB_FILENAME = $DB_FILENAME"

DB_FILE="$DB_DIR/$DB_FILENAME"
# echo "DB_FILE = $DB_FILE"


#-------------------------------------------------------------------------------
# Start

#-----------------------------
# Initialization information

echo "Site path     : $WWW_DIR"
echo "Database file : $DB_FILE"
echo "----------------------------------------------------------"

#--------------------
# Command execution

if [ "$SITE" -a -d "$WWW_DIR" ]
then
  # Initialize the repository directory if it does not exist.
  if [ ! -d "$DB_DIR" ]
  then
    mkdir -p "$DB_DIR"
    echo "Repository directory $DB_DIR created"
    
    cd "$DB_DIR"
    git init
  fi
  
  # Dump the database to the database backup directory.
  rm -f "$DB_FILE"
  
  cd "$WWW_DIR"  
  drush cache-clear all > /dev/null
  drush sql-dump --ordered-dump --result-file="$DB_FILE"
  
  echo "$SITE database dumped to $DB_FILE"
  echo "----------------------------------------------------------"
  
  # Copy site settings and files into repo.
  
  echo "Copying settings and files from $WWW_DIR/sites/default to $DB_DIR/default"
  
  rm -fR "$DB_DIR/default"  
  cp -R --preserve "$WWW_DIR/sites/default" "$DB_DIR/default"
  
  echo "Site settings and files copied."
  echo "-----------------------------------------------------------"
  
  # Commit changes to the database into the repository.
  
  echo "Committing changes to the repository."
  
  cd "$DB_DIR"
  
  git add .
  git add -u
  git commit -m "$TIMESTAMP - $COMMIT_MESSAGE"
  git gc
fi
