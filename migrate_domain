#!/bin/bash
#-------------------------------------------------------------------------------
#
# migrate_domain <user@host:remote-domain> <local-domain>
#
#-------------------------------------------------------------------------------
# Properties

HELP="
The migrate command creates a local copy of a site at a specified remote domain.

--------------------------------------------------------------------------------

 Developed by Adrian Webb of http://collectivecolors.com
 Licensed under GPL v2

 See the project page at:  http://github.com/collectivecolors/site-admin
 Report issues here:       http://github.com/collectivecolors/site-admin/issues

--------------------------------------------------------------------------------
"

USAGE="
usage: migrate_domain [ --help ]                 # Show usage information
                      ----------------------------------------------------------
                      [ --email <admin-email> ]  # Administrator email.
                                                 # Defaults to value of global \$WEBSERVER_ADMIN_EMAIL
                      ----------------------------------------------------------
                      [ --secure ]               # Only generate HTTPS host
                                                 # Both HTTP and HTTPS vhosts are genenerated by default
                      ----------------------------------------------------------
                      [ --secure-port <port> ]   # HTTPS port for this host
                                                 # Defaults to port 443
                      ----------------------------------------------------------
                      [ --no-crt ]               # Do not generate self signed certificate
                                                 # Certificate is generated by default
                      ----------------------------------------------------------
                      [ --unsecure ]             # Only generate HTTP host
                                                 # Both HTTP and HTTPS vhosts are genenerated by default
                      ----------------------------------------------------------
                      [ --port <port> ]          # HTTP port for this host
                                                 # Defaults to port 80
                      ----------------------------------------------------------
                      [ --db-root <root-name> ]  # Root database name (run as)
                                                 # Defaults to "root"
                      ----------------------------------------------------------
                      [ --root-pass <password> ] # Database root password
                                                 # Prompt by default
                      ----------------------------------------------------------
                      [ --db-name <db-name> ]    # Database name to create
                                                 # (must be 64 characters or less)
                                                 # Defaults to <local-domain>
                      ----------------------------------------------------------
                      [ --db-user <db-user> ]    # User with all privileges on this database
                                                 # (must be 16 characters or less)
                                                 # Defaults to <database>
                      ----------------------------------------------------------
                      [ --db-pass <password> ]   # Database user password
                                                 # Defaults to <db-user>
                      ----------------------------------------------------------
                      [ --cron-site <cron-int>   # Site cron job interval.
                                                 # Defaults to '*/5' (every 5 minutes)
                      ----------------------------------------------------------
                      [ --cron-db <cron-int>     # Database commmit job interval.
                                                 # Defaults to '*/15' (every 15 minutes)
                      ----------------------------------------------------------
                      <user@host:remote-domain>  # Remote user@host with domain
                      ----------------------------------------------------------
                      <local-domain>             # Local domain to use
"


#-------------------------------------------------------------------------------
# Initial parameters

ADMIN_EMAIL=''

GENERATE_UNSECURE='1'
UNSECURE_PORT=80

GENERATE_SECURE='1'
GENERATE_CERTIFICATE='1'
SECURE_PORT=443

DB_ROOT_NAME='root'
DB_ROOT_PASS=''
DB_NAME=''
DB_USER=''
DB_PASS=''

CRON_SITE='*/5'
CRON_DB='*/15'


#-------------------------------------------------------------------------------
# Parse parameters

while test $# -ne 0
do
  case "$1" in

  --help)
    echo "$HELP"
    echo "$USAGE"
    exit 0;;

  --email)
    if [ ! "$2" ]
    then
      echo "Email option requires an email address."
      echo "$USAGE"
      exit 1
    fi

    ADMIN_EMAIL="$2"
    shift;;

  --port)
    if [ ! "$2" ]
    then
      echo "Port option requires a positive integer value."
      echo "$USAGE"
      exit 2
    fi

    UNSECURE_PORT="$2"
    shift;;

  --secure-port)
    if [ ! "$2" ]
    then
      echo "Secure port option requires a positive integer value."
      echo "$USAGE"
      exit 3
    fi

    SECURE_PORT="$2"
    shift;;

  --db-root)
    if [ ! "$2" ]
    then
      echo "Database root name option requires the root database user name."
      echo "$USAGE"
      exit 4
    fi

    DB_ROOT_NAME="$2"
    shift;;

  --root-pass)
    if [ ! "$2" ]
    then
      echo "Database root password must be specified."
      echo "$USAGE"
      exit 5
    fi

    DB_ROOT_PASS="$2"
    shift;;

  --db-name)
    if [ ! "$2" ]
    then
      echo "Database name option requires a name of no more than 64 characters."
      echo "$USAGE"
      exit 6
    fi

    DB_NAME="$2"
    shift;;

  --db-user)
    if [ ! "$2" ]
    then
      echo "Database user option requires a user name of no more than 16 characters."
      echo "$USAGE"
      exit 7
    fi

    DB_USER="$2"
    shift;;

  --db-pass)
    if [ ! "$2" ]
    then
      echo "Database user password must be specified."
      echo "$USAGE"
      exit 8
    fi

    DB_PASS="$2"
    shift;;

  --cron-site)
    if [ ! "$2" ]
    then
      echo "Site cron job interval must be specified."
      echo "$USAGE"
      exit 8
    fi

    CRON_SITE="$2"
    shift;;

  --cron-db)
    if [ ! "$2" ]
    then
      echo "Database commit cron job interval must be specified."
      echo "$USAGE"
      exit 8
    fi

    CRON_DB="$2"
    shift;;

  --unsecure) GENERATE_SECURE='';;
  --secure) GENERATE_UNSECURE='';;
  --no-crt) GENERATE_CERTIFICATE='';;

  *) break;;
  esac
  shift
done

REMOTE_HOST="$1"
LOCAL_DOMAIN="$2"


# Remote user@host:domain
if [ ! "$REMOTE_HOST" ]
then
  echo "An accessible remote user@host is required to migrate a site."
  exit 9
fi

ORIG_IFS="$IFS" # Backup $IFS variable

set -- "$REMOTE_HOST"
IFS="@"; declare -a Array=($*)
REMOTE_USER="${Array[0]}"
REMOTE_HOST="${Array[1]}"

set -- "$REMOTE_HOST"
IFS=":"; declare -a Array=($*)
REMOTE_HOST="${Array[0]}"
REMOTE_DOMAIN="${Array[1]}"

IFS="$ORIG_IFS" # Restore $IFS variable

# echo "$REMOTE_USER"
# echo "$REMOTE_HOST"


# Remote domain
if [ ! "$REMOTE_DOMAIN" ]
then
  echo "The remote domain name is required to migrate a domain."
  echo "$USAGE"
  exit 10
fi
# echo "$REMOTE_DOMAIN"


# Local domain
if [ ! "$LOCAL_DOMAIN" ]
then
  echo "The local domain name is required to migrate a domain."
  echo "$USAGE"
  exit 11
fi
# echo "$LOCAL_DOMAIN"


# Administrator email
if [ ! "$ADMIN_EMAIL" ]
then
  ADMIN_EMAIL="$WEBSERVER_ADMIN_EMAIL" # Look for global admin email.
fi

if [ ! "$ADMIN_EMAIL" ]
then
  echo "Administrator email is required to setup the Apache virtual host."
  echo "You can specify a global variable \$WEBSERVER_ADMIN_EMAIL to have this"
  echo "automatically set each time you execute this command."
  echo "$USAGE"
  exit 12
fi
# echo "$ADMIN_EMAIL"


# Database
# echo "$DB_ROOT_NAME"

if [ ! "$DB_NAME" ]
then
  DB_NAME="$LOCAL_DOMAIN"
fi
# MySQL only allows for a 64 character database name.
if [ "${DB_NAME:0:64}" != "$DB_NAME" ]
then
  echo "Database name must be 64 characters or less in length."
  exit 13
fi

DB_NAME="${DB_NAME//./_}" # No dots

# echo "$DB_NAME"


# User
if [ ! "$DB_USER" ]
then
  DB_USER="$DB_NAME"

# MySQL only allows for a 16 character user name.
elif [ "${DB_USER:0:16}" != "$DB_USER" ]
then
  echo "Database user name must be 16 characters or less in length."
  exit 14
fi

DB_USER="${DB_USER//./_}" # No dots

# echo "$DB_USER"


# Password
if [ ! "$DB_PASS" ]
then
  DB_PASS="$DB_USER"
fi


#-------------------------------------------------------------------------------
# Variables

# Site

if [ "$GENERATE_UNSECURE" ]
then
  SITE_PROTOCOL='http'
else
  SITE_PROTOCOL='https'
fi

# Directories
DOMAIN_DIR="$HOME/sites/$LOCAL_DOMAIN"

SITE_DIR="$DOMAIN_DIR/www"
DB_DIR="$DOMAIN_DIR/db"

DB_SETTINGS_DIR="$DB_DIR/default"
SITE_SETTINGS_DIR="$SITE_DIR/sites/default"

REMOTE_SITE_DIR="sites/$REMOTE_DOMAIN/www"
REMOTE_DB_DIR="db/sites/$REMOTE_DOMAIN"

# Connection string
CONNECTION_STR="$REMOTE_USER@$REMOTE_HOST"

# Settings
SETTINGS_FILE="$DB_SETTINGS_DIR/settings.php"
SITE_SETTINGS_FILE="$SITE_SETTINGS_DIR/settings.php"

USER_SETTINGS_FILE="$HOME/.siteconfig"
SITE_KEY="${LOCAL_DOMAIN//./}" # No dots

# Database
DB_FILE="$DB_DIR/db.sql"
DB_CONNECTION_STR="mysqli://$DB_USER:$DB_PASS@localhost/$DB_NAME"

# Crontab
CRONTAB_BACKUP="/tmp/$USER.crontab"
CRONTAB_PATH="PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin"

CRONTAB_SITE_TASK="wget -O - -t 1 -q $SITE_PROTOCOL://$LOCAL_DOMAIN/cron.php"
CRONTAB_DB_TASK="dbcommit $LOCAL_DOMAIN 'Automated database commit.' $USER"


echo "-------------------------------------------------------------------------"
echo ""
echo -e " Saving site configurations.\n"

# Use Git's handy configuration program for our settings.
git config --file "$USER_SETTINGS_FILE" $SITE_KEY.remotehost "$CONNECTION_STR" || exit 15
git config --file "$USER_SETTINGS_FILE" $SITE_KEY.remotedomain "$REMOTE_DOMAIN" || exit 16
git config --file "$USER_SETTINGS_FILE" $SITE_KEY.dbuser "$DB_USER" || exit 17
git config --file "$USER_SETTINGS_FILE" $SITE_KEY.dbname "$DB_NAME" || exit 18
git config --file "$USER_SETTINGS_FILE" $SITE_KEY.dbpass "$DB_PASS" || exit 19

# Make sure user settings file is private.
chmod 600 "$USER_SETTINGS_FILE" || exit 20


echo "-------------------------------------------------------------------------"
echo ""
echo -e " Creating Apache virtual host configurations.\n"

VHOST_ARGS=''

# Administrative email
if [ "$ADMIN_EMAIL" ]
then
  VHOST_ARGS="$VHOST_ARGS --email $ADMIN_EMAIL"
fi

# Unsecure host configurations.
if [ ! "$GENERATE_SECURE" ]
then
  VHOST_ARGS="$VHOST_ARGS --unsecure" # Unsecure only.
fi
if [ "$UNSECURE_PORT" ]
then
  VHOST_ARGS="$VHOST_ARGS --port $UNSECURE_PORT"
fi

# Secure host configurations.
if [ ! "$GENERATE_UNSECURE" ]
then
  VHOST_ARGS="$VHOST_ARGS --secure" # Secure only.
fi
if [ "$SECURE_PORT" ]
then
  VHOST_ARGS="$VHOST_ARGS --secure-port $SECURE_PORT"
fi
if [ ! "$GENERATE_CERTIFICATE" ]
then
  VHOST_ARGS="$VHOST_ARGS --no-crt"
fi

# Host domain name.
VHOST_ARGS="$VHOST_ARGS $LOCAL_DOMAIN"

echo "Generating site virtual host for $LOCAL_DOMAIN"
echo "  add_vhost $VHOST_ARGS"

add_vhost $VHOST_ARGS || exit $((21 + $?))


echo "-------------------------------------------------------------------------"
echo ""
echo -e " Fetching remote site.\n"

# Clone site
git clone "$CONNECTION_STR:$REMOTE_SITE_DIR" "$SITE_DIR" || exit 46


echo "-------------------------------------------------------------------------"
echo ""
echo -e " Fetching remote database.\n"

# Remote database.
echo "Performing remote database commit for $REMOTE_DOMAIN at $CONNECTION_STR."
ssh "$CONNECTION_STR" "dbcommit $REMOTE_DOMAIN 'Remote database backup for migration by $USER@$HOSTNAME'" || exit 47

echo "Cloning remote database into: $DB_DIR."
git clone "$CONNECTION_STR:$REMOTE_DB_DIR" "$DB_DIR" || exit 48


echo "-------------------------------------------------------------------------"
echo ""
echo -e " Creating site database and database user.\n"

# Local database.
DB_ARGS=''

# Root database user. (can create databases and users)
if [ "$DB_ROOT_NAME" ]
then
  DB_ARGS="$DB_ARGS --root $DB_ROOT_NAME"
fi

# Root database password.
if [ "$DB_ROOT_PASS" ]
then
  DB_ARGS="$DB_ARGS --root-pass $DB_ROOT_PASS"
fi

# Database name. (this is required)
DB_ARGS="$DB_ARGS --db-pass $DB_PASS $DB_NAME"

# Database user name.
if [ "$DB_USER" ]
then
  DB_ARGS="$DB_ARGS $DB_USER"
fi

echo "Creating site database and database user for $LOCAL_DOMAIN"
echo "  add_db $DB_ARGS"

add_db $DB_ARGS || exit $((49 + $?))


echo "-------------------------------------------------------------------------"
echo ""
echo -e " Importing the site database and files.\n"

# Database
echo "Importing database $DB_FILE into $DB_NAME"
mysql --user="$DB_USER" --password="$DB_PASS" "$DB_NAME" < "$DB_FILE" || exit 58

# Files
echo "Copying files from $DB_SETTINGS_DIR to $SITE_SETTINGS_DIR"
cp -fR --preserve "$DB_SETTINGS_DIR" "$SITE_SETTINGS_DIR" || exit 59
chmod 644 "$SITE_SETTINGS_FILE" || exit 60
chmod 755 "$SITE_SETTINGS_DIR" || exit 61

# Set database to active database in site settings.php
echo "Setting database connection string to: $DB_CONNECTION_STR"
sed -i -r "s#^\\\$db_url\s*=\s*'mysqli?\:[^']+#\\\$db_url = '$DB_CONNECTION_STR#g" "$SITE_SETTINGS_FILE" || exit 62


echo "-------------------------------------------------------------------------"
echo ""
echo -e " Configuring cron.\n"

# Get current crontab.
echo "Pulling the current crontab into: $CRONTAB_BACKUP"
crontab -l > "$CRONTAB_BACKUP" || exit 63

# Check for PATH.  (dbcommit resides in: /usr/local/bin)
if ! grep -q "PATH=" "$CRONTAB_BACKUP"
then
  echo "Prepending PATH to user crontab."
  echo "$CRONTAB_PATH\n\n" | cat - "$CRONTAB_BACKUP" > "$CRONTAB_BACKUP.tmp" && mv "$CRONTAB_BACKUP.tmp" "$CRONTAB_BACKUP" || exit 64
  rm -f "$CRONTAB_BACKUP.tmp" || exit 65
fi

echo "" >> "$CRONTAB_BACKUP" || exit 66

# Add site cronjob.
if ! grep -q "$CRONTAB_SITE_TASK" "$CRONTAB_BACKUP"
then
  echo "$CRON_SITE * * * * $CRONTAB_SITE_TASK" >> "$CRONTAB_BACKUP" || exit 67
fi

# Add db cronjob.
if ! grep -q "$CRONTAB_DB_TASK" "$CRONTAB_BACKUP"
then
  echo "$CRON_DB * * * * $CRONTAB_DB_TASK" >> "$CRONTAB_BACKUP" || exit 68
fi

echo " New crontab:"
cat "$CRONTAB_BACKUP"
echo -e "\n\n"

# Set new crontab.
echo "Setting user crontab."
crontab "$CRONTAB_BACKUP" || exit 69
rm -f "$CRONTAB_BACKUP" || exit 70



echo "-------------------------------------------------------------------------"
echo -e "Site migrated successfully.\n"
echo "Make sure you have added a 127.0.0.1 alias for $LOCAL_DOMAIN in your"
echo "network configuration."



